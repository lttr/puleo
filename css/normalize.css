/*
* Based on Open Props: normalize.css and normalize.src.css
*/

*,
::before,
::after {
  /* Is a design mistake in CSS, source: https://wiki.csswg.org/ideas/mistakes */
  box-sizing: border-box;
}

/*
* Remove default margins because it is more predictable to use layout utilities
* for consistent spacing.
*
* margin: 0 for dialog would not place the dialog in the center of a viewport.
*/
:where(:not(dialog)) {
  margin: 0;
}

:where(:not(fieldset, progress, meter)) {
  border-width: 0;
  border-style: solid;
  background-origin: border-box;
  background-repeat: no-repeat;
}

:where(html) {
  block-size: 100%;
  font-family: var(--font-family-body);

  /*
  * From [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)
  * Accessibility concerns: Use a minimum value of 1.5 for line-height for main
  * paragraph content. 
  */
  line-height: var(--line-height-body);

  /* 
  * From [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust):
  * ...on a properly designed responsive site the text-size-adjust behavior is not
  * needed, so developers can elect to turn it off by specifying a value of none.
  * also see https://kilianvalkhof.com/2022/css-html/your-css-reset-needs-text-size-adjust-probably/
  */
  -webkit-text-size-adjust: none;
  text-size-adjust: none;

  @media (--motionOK) {
    scroll-behavior: smooth;
  }
}

@media (--motionOK) {
  :where(:focus-visible) {
    transition: outline-offset 145ms var(--ease-2);
  }
  :where(:not(:active):focus-visible) {
    transition-duration: 0.25s;
  }
}

:where(:not(:active):focus-visible) {
  outline-offset: var(--outline-offset);
}

:where(body) {
  min-block-size: 100%;
  /* Base font size that inherits. */
  font-size: var(--font-size-body);
}

:where(p, h1, h2, h3, h4, h5, h6) {
  /* Soft wrap overflowing words when possible to prevent horizontal scrolling. */
  overflow-wrap: break-word;
}

/* Set shorter line heights on headings and interactive elements */
:where(button, input, label) {
  line-height: var(--font-lineheight-1);
}

:where(h1, h2, h3, h4, h5, h6) {
  line-height: var(--line-height-headings);
  font-weight: var(--font-weight-headings);
  text-wrap: balance;
}

:where(h1) {
  font-size: var(--font-size-h1);
  max-inline-size: var(--size-header-1);
}

:where(h2) {
  font-size: var(--font-size-h2);
  max-inline-size: var(--size-header-2);
}

:where(h3) {
  font-size: var(--font-size-h3);
}

:where(h4) {
  font-size: var(--font-size-h4);
}

:where(h5) {
  font-size: var(--font-size-h5);
}

:where(h3, h4, h5, h6, dt) {
  max-inline-size: var(--size-header-3);
}

:where(p, ul, ol, dl, h6) {
  font-size: var(--font-size-0);
}

:where(a, u, ins, abbr) {
  text-underline-offset: 1px;

  @supports (-moz-appearance: none) {
    text-underline-offset: 2px;
  }
}

:where(
    a[href],
    area,
    button,
    input:not(
        [type="text"],
        [type="email"],
        [type="number"],
        [type="password"],
        [type=""],
        [type="tel"],
        [type="url"]
      ),
    label[for],
    select,
    summary,
    [tabindex]:not([tabindex*="-"])
  ) {
  cursor: pointer;
}

:where(
    a[href],
    area,
    button,
    input,
    label[for],
    select,
    summary,
    textarea,
    [tabindex]:not([tabindex*="-"])
  ) {
  touch-action: manipulation;
  -webkit-tap-highlight-color: transparent;
}

:where(a) {
  padding-inline: var(--space-1);
  margin-inline: calc(var(--space-1) * -1);
  padding-block: var(--space-1);
  margin-block: calc(var(--space-1) * -1);

  &:where([href]) {
    text-decoration-color: var(--link-color);

    &:where(:visited) {
      text-decoration-color: var(--link-color-visited);
    }
  }

  &:where(:not(:hover)) {
    text-decoration: inherit;
  }
}

:where(img, svg, video, canvas, audio, iframe, embed, object) {
  /* Don't consider these objects as inline. */
  display: block;
}

:where(img, svg, video) {
  /* Don't overflow from its container */
  max-inline-size: 100%;
  block-size: auto;
}

/* Let form controls to look like other other elements. */
:where(input, button, textarea, select),
:where(input[type="file"])::-webkit-file-upload-button {
  font: inherit;
  font-size: inherit;
  color: inherit;
  letter-spacing: inherit;
}

::placeholder {
  color: var(--gray-7);
  opacity: 0.75;
}

:where(input:not([type="range"], [type="checkbox"], [type="radio"]), textarea) {
  padding-inline: var(--space-2);
  padding-block: var(--space-1);
}

:where(select) {
  padding-inline: var(--space-3) 0;
  padding-block: var(--space-1);
}

:where(
    textarea,
    select,
    input:not([type="button"], [type="submit"], [type="reset"])
  ) {
  background-color: var(--surface-2);
  border-radius: var(--input-radius);
}

:where(textarea) {
  resize: block;
}

:where(input[type="checkbox"], input[type="radio"]) {
  block-size: var(--space-2);
  inline-size: var(--space-2);
}

:where(svg:not([width])) {
  inline-size: var(--space-8);
}

:where(code, kbd, samp, pre) {
  font-family: var(--font-mono);
}
:where(:not(pre) > code, kbd) {
  white-space: nowrap;
}

:where(pre) {
  white-space: pre;
  min-inline-size: 0;
  max-inline-size: max-content;
  writing-mode: lr;
  direction: ltr;
}

:where(:not(pre) > code) {
  padding: var(--space-1) var(--space-2);
  background: var(--surface-2);
  border-radius: var(--radius-2);
  writing-mode: lr;
}

:where(kbd, var) {
  padding: var(--space-1) var(--space-2);
  border-width: var(--border-size-1);
  border-color: var(--surface-4);
  border-radius: var(--radius-2);
}

:where(mark) {
  border-radius: var(--radius-2);
  padding-inline: var(--space-1);
}

:where(ol, ul) {
  padding-inline-start: var(--space-6);
}

:where(li) {
  padding-inline-start: var(--space-2);
}

:where(li, dd, figcaption) {
  max-inline-size: var(--size-content-2);
}

:where(p) {
  max-inline-size: var(--size-content-3);
  text-wrap: pretty;
}

:where(dt, summary) {
  font-weight: var(--font-weight-body-bold);
}

:where(dt:not(:first-of-type)) {
  margin-block-start: var(--space-5);
}

:where(small) {
  font-size: max(0.5em, var(--font-size-0));
  max-inline-size: var(--size-content-1);
}

:where(hr) {
  margin-block: var(--space-5);
  height: var(--border-size-1);
  background-color: var(--surface-3);
}

:where(figure) {
  display: grid;
  gap: var(--space-2);
  place-items: center;

  & > :where(figcaption) {
    font-size: var(--font-size-1);
    text-wrap: balance;
  }
}

:where(blockquote, :not(blockquote) > cite) {
  border-inline-start-width: var(--border-size-3);
}

:where(blockquote) {
  display: grid;
  gap: var(--space-3);
  padding-block: var(--space-3);
  padding-inline: var(--space-4);
  max-inline-size: var(--size-content-2);
}

:where(:not(blockquote) > cite) {
  padding-inline-start: var(--space-2);
}

:where(summary) {
  background: var(--surface-3);
  padding: var(--space-2) var(--space-3);
  margin: calc(var(--space-2) * -1) calc(var(--space-3) * -1);
  border-radius: var(--radius-default);
}

:where(details) {
  padding-inline: var(--space-3);
  padding-block: var(--space-2);
  background: var(--surface-2);
  border-radius: var(--radius-default);
}

:where(details[open] > summary) {
  margin-bottom: var(--space-2);
  border-end-start-radius: 0;
  border-end-end-radius: 0;
}

:where(fieldset) {
  border-radius: var(--radius-default);
  border: var(--border-size-1) solid var(--surface-4);
}

:where(del) {
  background: var(--red-9);
  color: var(--red-2);
}

:where(ins) {
  background: var(--green-9);
  color: var(--green-1);
}

:where(abbr) {
  text-decoration-color: var(--blue-5);
}

:where(dialog) {
  background-color: var(--surface-1);
  color: inherit;
  border-radius: var(--radius-default);
  box-shadow: var(--shadow-6);

  &::backdrop {
    backdrop-filter: blur(25px);
  }
}

:where(html:has(dialog[open])) {
  overflow: hidden;
}

:where(menu) {
  padding-inline-start: 0;
  display: flex;
  gap: var(--space-3);
}

:where(sup) {
  font-size: 0.5em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

:where(table) {
  width: fit-content;
  border: 1px solid var(--surface-2);
  background: var(--surface-2);
  border-radius: var(--radius-default);

  --nice-inner-radius: calc(var(--radius-default) - 2px);
}

:where(table:not(:has(tfoot)) tr:last-child td:first-child) {
  border-bottom-left-radius: var(--nice-inner-radius);
}

:where(table:not(:has(tfoot)) tr:last-child td:last-child) {
  border-bottom-right-radius: var(--nice-inner-radius);
}

:where(table thead th:first-child) {
  border-top-left-radius: var(--nice-inner-radius);
}

:where(table thead th:last-child) {
  border-top-right-radius: var(--nice-inner-radius);
}

:where(tfoot th:first-of-type) {
  border-end-start-radius: var(--nice-inner-radius);
}

:where(tfoot th:last-of-type) {
  border-end-end-radius: var(--nice-inner-radius);
}

:where(th) {
  color: var(--text-color-1);
  background-color: var(--surface-2);
}

:where(table :is(a, button, [contenteditable]):is(:focus-visible)) {
  outline-offset: -2px;
}

:where(td) {
  background: var(--surface-1);
  max-inline-size: var(--size-content-2);
  text-wrap: pretty;
}

:where(td, th) {
  text-align: left;
  padding: var(--space-2);
}

:where(:is(td, th):not([align])) {
  text-align: center;
}

:where(thead) {
  border-collapse: collapse;
}

:where(table tr:hover td),
:where(tbody tr:nth-child(even):hover td) {
  background-color: var(--gray-10);

  @media (prefers-color-scheme: light) {
    background-color: white;
  }
}

:where(table > caption) {
  margin: var(--space-3);
}

:where(tfoot button) {
  padding-block: var(--space-1);
  padding-inline: var(--space-3);
}

@media (--OSdark) {
  :where(
      textarea,
      select,
      input:not([type="button"], [type="submit"], [type="reset"])
    ) {
    background-color: hsl(210 11% 10%);
  }

  :where(dialog) {
    background-color: var(--surface-2);
  }

  :where(html) {
    --shadow-strength: 10%;
    --shadow-color: 220 40% 2%;
  }

  ::placeholder {
    color: var(--gray-6);
  }
}
